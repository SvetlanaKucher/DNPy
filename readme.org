* DNPy

  *DNPy* is a Python code package to evaluate continuous wave (CW) Overhauser dynamic nuclear polarization (ODNP) experiments. DNPy has taken the core functionality from [[https://github.com/bennomeier/pyNMR][pyNMR]].

* Sample output
 - kSigma:
#+attr_html: :width 90%
[[file:http://www.spintoolbox.com/media/filer_public_thumbnails/filer_public/3f/27/3f278115-526f-4c4c-8d4d-cc14787481ae/ksigma.jpg__3250x2000_q85_crop_subsampling-2_upscale.jpg]]
 - ODNP enhancement
#+attr_html: :width 90%
[[file:http://www.spintoolbox.com/media/filer_public_thumbnails/filer_public/f8/d2/f8d2a08b-34a3-490c-acf5-d8f070efce85/normalized_odnp_enhancement.jpg__3250x2000_q85_crop_subsampling-2_upscale.jpg]]
 - T1 inversion recovery fit
http://www.spintoolbox.com/media/filer_public_thumbnails/filer_public/f8/d2/f8d2a08b-34a3-490c-acf5-d8f070efce85/normalized_odnp_enhancement.jpg__3250x2000_q85_crop_subsampling-2_upscale.jpg
#+attr_html: :width 90%
[[file:http://www.spintoolbox.com/media/filer_public_thumbnails/filer_public/fc/70/fc70ac2e-146d-483a-a910-e2342f56bab7/t1.jpg__3250x2000_q85_crop_subsampling-2_upscale.jpg]]


* Usage
  You need to have python3 with following packages installed:
- Numpy
  Install using ~pip3 install --user numpy~ or ~sudo apt install python3-numpy~ on linux.
- Scipy
  Install using ~pip3 install --user scipy~ or ~sudo apt install python3-scipy~ on linux.

You can install [[https://www.anaconda.com/download/][ANCONDA]] for windows to have all necessary packages installed.
Then DNPy can be run with the following:
#+BEGIN_SRC shell
python3 dnpEval.py
#+END_SRC

A sample usage is implemented in ~dnpEval.py~. You need to set the following variables in your dnpEval:
#+BEGIN_SRC python
path = ''
powerFile = 'powerBU'  
kwargs = {
    't1Calc': 'PCreal',  # 'PCreal' for real phase cycled channel or 'PCmagn' or 'real' or 'magn'
    'phase': 'first',  # all, none, first
    'ftWindow': 200,  # X domain for FT plot, int. and phase calculation
    'maxWin': 1000,  # Does not allow peaks out of this domain to be calculated in int.
    'lS': 70,  # Left shift points or 'auto'
    'lSt1': 70,  # LS for t1 experiments (this differs from DNP sometimes)
    'rS': 110,  # Right shidt points
    'rSt1': 75,
    'lB': 2,  # Line boradening [Hz]
    'offCor': True,  # offset correctioon
    'basCor': True,  # baseline correction
    'evalPath': 'evalHadiTest',
    'plotDpi': 250,  # plot file resolution
    'plotExts': ['jpg'],  # remove all if you do not want plots to be saved
    'process': True,
    'debug': False,
    'dumpToCsv': True,
    'figSize': (13, 8),
    'powerFile': powerFile,
    }

#+END_SRC
- ~path~ defines the ODNP experiment root folder.
- ~powerFile~ is used when you have "ODNP - set .. dB" style title in your experiments and is a csv file containing dB to dBm conversion table.
- ~debug~ boolean turns verbose evaluation on and gives you more information.
- ~plotExts~ denotes the plot file extensions you want to have saved.

Finally, we call the main function using:
#+BEGIN_SRC python
exps = return_exps(path, **kwargs) 
#+END_SRC

